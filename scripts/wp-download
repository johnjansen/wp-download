#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
wp-download

This is a downloader for Wikipedia database dumps
"""

# Â© Copyright 2009-2015 Wolodja Wentland. All Rights Reserved.

# This file is part of wp-download.
#
# wp-download is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# wp-download is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with wp-download. If not, see <http://www.gnu.org/licenses/>.

import argparse
import logging
import os
import sys

import wp_download as wpd
import wp_download.download as wpd_down
import wp_download.exceptions as wpd_exc

from wp_download.version import __version__

LOG = logging.getLogger('wp-download')
LOG.setLevel(logging.DEBUG)

def init_parser():
    """Initialise command line parser."""

    parser = argparse.ArgumentParser()

    parser.add_argument(
        '-q', '--quiet',
        action='store_true', dest='quiet',
        default=False,
        help='do not generate output (only report errors)'
    )
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        dest='verbose',
        default=False,
        help='generate verbose output'
    )
    parser.add_argument(
        '-c', '--config',
        metavar='FILE',
        default = os.path.expanduser('~/.wpdownloadrc'),
        help='load configuration from FILE [default: %(default)s]'
    )
    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s {}'.format(__version__)
    )
    parser.add_argument(
        'DOWNLOAD_DIR',
        help='Directory in which dumps are saved',
    )

    # Logging related options

    log_level = ['DEBUG', 'INFO', 'WARNING', 'ERROR']

    log_options = parser.add_argument_group(
        'Logging',
        'Specify log file handling.'
    )
    log_options.add_argument(
        '--log-file',
        metavar='FILE',
        help='write logs to FILE'
    )
    log_options.add_argument(
        '--log-file-level',
        help='set log level [default: %(default)s]',
        action='store',
        default='INFO',
        choices=log_level
    )

    # Download related options
    down_options = parser.add_argument_group(
        'Download',
        'Change download behaviour'
    )
    down_options.add_argument(
        '--force',
        action='store_true',
        dest='force',
        default=False,
        help='Force download of all files.'
    )
    down_options.add_argument(
        '--resume',
        action='store_true',
        dest='resume',
        default=False,
        help='Resume partial downloads.'
    )
    down_options.add_argument(
        '--timeout',
        type=int,
        dest='timeout',
        default=30,
        help='Set timeout for download in seconds [default: %(default)ss]')
    down_options.add_argument(
        '--retries',
        type=int,
        dest='retries',
        default=3,
        help='Set number of download attempts [default: %(default)s]'
    )
    down_options.add_argument(
        '--custom-dump',
        action='append',
        dest='custom_dump',
        metavar='LANG:DATE',
        help='Download a custom dump for specific language (e.g., en:20150603)'
    )

    return parser

def init_logging(options):
    """Initialise logging framework
    """

    error_handler = logging.StreamHandler(sys.stderr)
    error_handler.setLevel(logging.ERROR)
    error_handler.formatter = logging.Formatter('[%(levelname)s]: %(message)s')
    LOG.addHandler(error_handler)
    wpd.LOG.addHandler(error_handler)

    if not options.quiet and options.verbose:
        console = logging.StreamHandler()
        console.setLevel(logging.INFO)
        console.formatter = logging.Formatter('%(message)s')
        console.addFilter(wpd_down.ErrorLimit())
        LOG.addHandler(console)
        wpd.LOG.addHandler(console)

    if options.log_file:
        log_file_handler = logging.FileHandler(
            options.log_file)
        log_file_handler.setLevel(
            logging.getLevelName(options.log_level))
        log_file_handler.formatter = logging.Formatter(
            '[%(levelname)s]: %(message)s')
        LOG.addHandler(log_file_handler)

    LOG.debug('Logging initialised')


def critical_error(err, exit_code):
    """Terminate program with given exit code

    :param exit_code:   Exit code for sys.exit()
    :type exit_code:    int
    """
    LOG.error(unicode(err))
    sys.exit(exit_code)


if __name__ == '__main__':

    try:
        parser = init_parser()
        args = parser.parse_args()
        init_logging(args)

        download_path = os.path.abspath(args.DOWNLOAD_DIR)

        try:
            wp_down = wpd_down.WPDownloader(args)
            wp_down.download_all_languages(download_path)

        except wpd_exc.ConfigParseError as cp_err:
            critical_error(cp_err, wpd_exc.ECPARSE)

        except wpd_exc.ConfigValueError as csv_err:
            critical_error(csv_err, wpd_exc.ECVALUE)

        except IOError as io_err:
            critical_error(io_err, wpd_exc.EIO)

    except KeyboardInterrupt:
        LOG.warning('Interrupted by user!')
    finally:
        logging.shutdown()
